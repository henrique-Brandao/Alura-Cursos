O QUE EU ESTOU APRENDENDO EM: JS PAGINAS DINAMICAS

document.createElement("elemento") CRIA UM ELEMENTO

elemento.appendChild("elemento criado"), FAZ UM ELEMENTO SER FILHO DE UM ELEMENTO PAI

New Date

display = none, faz o elemento sair da tela

Export e Import(Vulgo exportação nomeada), exporta e importa o que precisar

export default, não precisa usar chave para importar
    
    Como funciona:

No arquivo de origem (exemplo: adicionarItem.js), você precisa exportar explicitamente cada item que deseja disponibilizar, usando export.

// Exportação nomeada
export function adicionarItem(evento) {
    // código da função
}

export function criarItemDaLista() {
    // código da função
}


Ao importar, você precisa mencionar os nomes exatos das exportações, utilizando {}:
import { adicionarItem, criarItemDaLista } from "./js/adicionarItem.js";

Isso é útil quando o módulo oferece várias funções ou objetos e você quer usar apenas alguns deles. Importações nomeadas também permitem combinar diversas exportações de diferentes módulos:
import { adicionarItem } from "./js/adicionarItem.js";
import { formatarTexto } from "./js/utilitarios.js";


// Exportação sem {} - Exportação Padrão

Quando um módulo define uma exportação padrão (default), ele permite exportar uma única funcionalidade principal. Nesse caso, não usamos {} ao importar, e o nome que você atribui durante a importação pode ser qualquer um.

Como funciona:

No arquivo de origem, a exportação padrão é declarada com export default:
// Exportação padrão
export default function adicionarItem(evento) {
    // código da função

    Ao importar, você pode usar qualquer nome para representar o módulo:
import adicionarItem from "./js/adicionarItem.js";
// Ou
import qualquerNome from "./js/adicionarItem.js";

Isso é útil quando o módulo tem um propósito único, como uma função principal, e você quer simplificar o uso.

Quando usar cada uma?
Use exportações nomeadas quando seu módulo contém múltiplas funções ou objetos que podem ser usados separadamente.
Use exportação padrão quando seu módulo tem uma funcionalidade central ou única.
Com essas distinções, você pode estruturar seu código de forma mais clara e aproveitar ao máximo os módulos no JavaScript!